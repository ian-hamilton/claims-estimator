@ngdoc overview
@name Tutorial: 318 External Pagination
@description

Pagination can be server based, with clicking the pagination buttons getting a new page of data from the server
rather than internally filtering the data that is held in the grid.

@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngTouch', 'ui.grid', 'ui.grid.pagination']);

    app.controller('MainCtrl', ['$scope', '$http', function ($scope, $http) {
      $scope.gridOptions = {
        paginationPageSizes: [25, 50, 75],
        paginationPageSize: 25,
        useExternalPagination: true,
        totalItems: 100,
        columnDefs: [
          { name: 'name' },
          { name: 'gender' },
          { name: 'company' }
        ],
        onRegisterApi: function(gridApi){
          $scope.gridApi = gridApi;
          $scope.gridApi.pagination.on.paginationChanged( $scope, function( currentPage, pageSize){
            $scope.getPage(currentPage, pageSize);
          });
        }
      };


      $scope.getPage = function(pageNumber, pageSize){
        var startingRow = pageSize * ( pageNumber - 1);   // page number starts at 1, not zero
        $http.get('/data/100.json')
        .success(function (data) {
          var newData = [];
          for( var i = startingRow; i < startingRow + $scope.gridOptions.paginationPageSize; i++ ) {
            newData.push( data[i] );
          }
          $scope.gridOptions.data = newData;
        });
      };
      
      $scope.getPage(1, 25);
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <p><strong>Grid with native pagination controls</strong></p>
      <div ui-grid="gridOptions" ui-grid-pagination class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 600px;
    }
  </file>
</example>
