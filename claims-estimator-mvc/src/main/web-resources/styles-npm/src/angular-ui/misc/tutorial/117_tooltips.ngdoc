@ngdoc overview
@name Tutorial: 117 Tooltips
@description

You can set a tooltip (actually, a title) to pop up when a user hovers over a cell.

This tooltip can be simply the cell contents, in which case set the columnDef to have
`cellTooltip: true`.  Or it can be a function that returns a value derived from the 
current column and row - for example:
```
  cellTooltip: function(row, col) {
    return 'Name: ' + row.entity.name + ' Company: ' + row.entity.company;
  }
```

Note that turning on tooltips will create an extra watcher per cell, so it has an impact on overall grid
performance, it is not recommended to turn them on for every column, rather only for the columns likely to have
data that won't be displayable within the grid row (e.g. long description fields).

<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngAnimate', 'ngTouch', 'ui.grid']);

    app.controller('MainCtrl', ['$scope', '$http', 'uiGridConstants', function ($scope, $http, uiGridConstants) {
      $scope.gridOptions = {
        enableSorting: true,
        columnDefs: [
          { field: 'name', cellTooltip: true },
          { field: 'company', cellTooltip: 
            function( row, col ) {
              return 'Name: ' + row.entity.name + ' Company: ' + row.entity.company;
            } 
          }
        ],
        onRegisterApi: function( gridApi ) {
          $scope.gridApi = gridApi;
          $scope.gridApi.core.on.sortChanged( $scope, function( grid, sort ) {
            $scope.gridApi.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
          })
        }
      };

      $http.get('/data/100.json')
        .success(function(data) {
          $scope.gridOptions.data = data;
        });
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <br>
      <br>
      <div id="grid1" ui-grid="gridOptions" class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 500px;
      height: 200px;
    }
    .red { color: red;  background-color: yellow !important; }
    .blue { color: blue;  }
  </file>
  <file name="scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');
  </file>
</example>

